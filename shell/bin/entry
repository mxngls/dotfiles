#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail


main() {
  local APPEND=0
  local EXT='.txt'
  
  # Exit if more than two arguments are supplied
  if [[ $# -gt 2 ]]; then
    echo 'Error: Too many arguments. Expects at most two arguments.'
    exit 1
  fi

  # Print helpful information about the intended usage
  if [[ $# -eq 1 ]] && [[ $1 == '-h' || $1 == '--help' ]]; then
    usage
  fi

  # Parse command line options
  while getopts ":a" opt; do
    case $opt in
      a)
        APPEND=1
        break
        ;;
      *)
        echo "Error: Invalid option: -$OPTARG"
        exit 1
        ;;
    esac
  done

  # Decrements the argument pointer so it points to next argument.
  # $1 now references the first non-option item supplied on the command-line
  # if one exists.
  shift $((OPTIND - 1))

  declare new_entry=${1:-}

  # Create a new journal entry or simply open an existing one
  if [[ -z "$new_entry" ]]; then
    new_entry="$(date +%Y-%m-%d)${EXT}"
    if [[ ! -f "$new_entry" ]]; then
      touch "$new_entry"
      APPEND=1
    elif ! grep -q '[^[:space:]]' "$new_entry"; then
      echo -e "# $(date)\n\n" > "$new_entry"
    fi
  elif [[ ! $(date -j -f '%Y-%m-%d' "$(basename "$new_entry" "$EXT")" 2> /dev/null) ]]; then
    echo 'Error: Invalid filename.'
    echo '       File name should conform to ISO 8601 (YYYY-MM-DD).'
    exit 1
  fi

  # Add the current date and time and format
  if [[ $APPEND == 1 ]]; then
    append "$new_entry"
  fi

  open "$new_entry"

  exit 0
}

# Open entry and jump to the last line and center if we use Vi etc.
open() {
  case $EDITOR in
    vi | vim | nvim)
      $EDITOR -c "normal Gzz" "$1"
      ;;
    *)
      $EDITOR "$1"
      ;;
  esac
  return 0
}

# Print usage information and exit
usage() {
  echo "Usage: $0 [-a] [FILENAME]"
  return 1
}

# Only add a date if the last line is not a newline
append() {
  if [[ $(wc -l < "$1" | bc) == 0 ]]; then
    echo -e "# $(date)\n\n" > "$1"
  elif [[ "$(tail -n 1 < "$1" | tr -d '[:space:]')" != $'' ]]; then
    echo -e "\n# $(date)\n\n" >> "$1"
  fi
  return 0
}

main "$@"
